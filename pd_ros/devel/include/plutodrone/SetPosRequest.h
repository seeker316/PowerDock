// Generated by gencpp from file plutodrone/SetPosRequest.msg
// DO NOT EDIT!


#ifndef PLUTODRONE_MESSAGE_SETPOSREQUEST_H
#define PLUTODRONE_MESSAGE_SETPOSREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace plutodrone
{
template <class ContainerAllocator>
struct SetPosRequest_
{
  typedef SetPosRequest_<ContainerAllocator> Type;

  SetPosRequest_()
    : pos_x(0.0)
    , pos_y(0.0)
    , pos_z(0.0)  {
    }
  SetPosRequest_(const ContainerAllocator& _alloc)
    : pos_x(0.0)
    , pos_y(0.0)
    , pos_z(0.0)  {
  (void)_alloc;
    }



   typedef double _pos_x_type;
  _pos_x_type pos_x;

   typedef double _pos_y_type;
  _pos_y_type pos_y;

   typedef double _pos_z_type;
  _pos_z_type pos_z;





  typedef boost::shared_ptr< ::plutodrone::SetPosRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::plutodrone::SetPosRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetPosRequest_

typedef ::plutodrone::SetPosRequest_<std::allocator<void> > SetPosRequest;

typedef boost::shared_ptr< ::plutodrone::SetPosRequest > SetPosRequestPtr;
typedef boost::shared_ptr< ::plutodrone::SetPosRequest const> SetPosRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::plutodrone::SetPosRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::plutodrone::SetPosRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::plutodrone::SetPosRequest_<ContainerAllocator1> & lhs, const ::plutodrone::SetPosRequest_<ContainerAllocator2> & rhs)
{
  return lhs.pos_x == rhs.pos_x &&
    lhs.pos_y == rhs.pos_y &&
    lhs.pos_z == rhs.pos_z;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::plutodrone::SetPosRequest_<ContainerAllocator1> & lhs, const ::plutodrone::SetPosRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace plutodrone

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::plutodrone::SetPosRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::plutodrone::SetPosRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::plutodrone::SetPosRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::plutodrone::SetPosRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::plutodrone::SetPosRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::plutodrone::SetPosRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::plutodrone::SetPosRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "aa385529adbe642710281f4f0434423c";
  }

  static const char* value(const ::plutodrone::SetPosRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xaa385529adbe6427ULL;
  static const uint64_t static_value2 = 0x10281f4f0434423cULL;
};

template<class ContainerAllocator>
struct DataType< ::plutodrone::SetPosRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "plutodrone/SetPosRequest";
  }

  static const char* value(const ::plutodrone::SetPosRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::plutodrone::SetPosRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# SetPos.srv\n"
"\n"
"float64 pos_x\n"
"float64 pos_y\n"
"float64 pos_z\n"
;
  }

  static const char* value(const ::plutodrone::SetPosRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::plutodrone::SetPosRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pos_x);
      stream.next(m.pos_y);
      stream.next(m.pos_z);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetPosRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::plutodrone::SetPosRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::plutodrone::SetPosRequest_<ContainerAllocator>& v)
  {
    s << indent << "pos_x: ";
    Printer<double>::stream(s, indent + "  ", v.pos_x);
    s << indent << "pos_y: ";
    Printer<double>::stream(s, indent + "  ", v.pos_y);
    s << indent << "pos_z: ";
    Printer<double>::stream(s, indent + "  ", v.pos_z);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PLUTODRONE_MESSAGE_SETPOSREQUEST_H

# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from plutodrone/Drone_stats.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Drone_stats(genpy.Message):
  _md5sum = "fe9c2a462dfb9d7ddfc039b6e8648a47"
  _type = "plutodrone/Drone_stats"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# Drone_stats.msg
# Accelerometer data
float32 accX
float32 accY
float32 accZ

# Gyroscope data
float32 gyroX
float32 gyroY
float32 gyroZ

# Magnetometer data
float32 magX
float32 magY
float32 magZ

# Orientation
float32 roll
float32 pitch
float32 yaw

# Altitude and battery data
float32 alt
float32 battery
float32 rssi

# Anchor data
float32 a1
float32 a2
float32 a3
"""
  __slots__ = ['accX','accY','accZ','gyroX','gyroY','gyroZ','magX','magY','magZ','roll','pitch','yaw','alt','battery','rssi','a1','a2','a3']
  _slot_types = ['float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       accX,accY,accZ,gyroX,gyroY,gyroZ,magX,magY,magZ,roll,pitch,yaw,alt,battery,rssi,a1,a2,a3

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Drone_stats, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.accX is None:
        self.accX = 0.
      if self.accY is None:
        self.accY = 0.
      if self.accZ is None:
        self.accZ = 0.
      if self.gyroX is None:
        self.gyroX = 0.
      if self.gyroY is None:
        self.gyroY = 0.
      if self.gyroZ is None:
        self.gyroZ = 0.
      if self.magX is None:
        self.magX = 0.
      if self.magY is None:
        self.magY = 0.
      if self.magZ is None:
        self.magZ = 0.
      if self.roll is None:
        self.roll = 0.
      if self.pitch is None:
        self.pitch = 0.
      if self.yaw is None:
        self.yaw = 0.
      if self.alt is None:
        self.alt = 0.
      if self.battery is None:
        self.battery = 0.
      if self.rssi is None:
        self.rssi = 0.
      if self.a1 is None:
        self.a1 = 0.
      if self.a2 is None:
        self.a2 = 0.
      if self.a3 is None:
        self.a3 = 0.
    else:
      self.accX = 0.
      self.accY = 0.
      self.accZ = 0.
      self.gyroX = 0.
      self.gyroY = 0.
      self.gyroZ = 0.
      self.magX = 0.
      self.magY = 0.
      self.magZ = 0.
      self.roll = 0.
      self.pitch = 0.
      self.yaw = 0.
      self.alt = 0.
      self.battery = 0.
      self.rssi = 0.
      self.a1 = 0.
      self.a2 = 0.
      self.a3 = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_18f().pack(_x.accX, _x.accY, _x.accZ, _x.gyroX, _x.gyroY, _x.gyroZ, _x.magX, _x.magY, _x.magZ, _x.roll, _x.pitch, _x.yaw, _x.alt, _x.battery, _x.rssi, _x.a1, _x.a2, _x.a3))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 72
      (_x.accX, _x.accY, _x.accZ, _x.gyroX, _x.gyroY, _x.gyroZ, _x.magX, _x.magY, _x.magZ, _x.roll, _x.pitch, _x.yaw, _x.alt, _x.battery, _x.rssi, _x.a1, _x.a2, _x.a3,) = _get_struct_18f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_18f().pack(_x.accX, _x.accY, _x.accZ, _x.gyroX, _x.gyroY, _x.gyroZ, _x.magX, _x.magY, _x.magZ, _x.roll, _x.pitch, _x.yaw, _x.alt, _x.battery, _x.rssi, _x.a1, _x.a2, _x.a3))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 72
      (_x.accX, _x.accY, _x.accZ, _x.gyroX, _x.gyroY, _x.gyroZ, _x.magX, _x.magY, _x.magZ, _x.roll, _x.pitch, _x.yaw, _x.alt, _x.battery, _x.rssi, _x.a1, _x.a2, _x.a3,) = _get_struct_18f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_18f = None
def _get_struct_18f():
    global _struct_18f
    if _struct_18f is None:
        _struct_18f = struct.Struct("<18f")
    return _struct_18f
